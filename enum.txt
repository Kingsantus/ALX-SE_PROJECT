{% for chat in chats %}
                {% if chat.user1_id == current_user.id %}
                    {% set other_user = chat.user2 %}
                {% else %}
                    {% set other_user = chat.user1 %}
                {% endif %}
                <div class="conversation" id="conversation--{{ chat.id }}">
                    <div class="conversation-top">
                        <button type="button" class="conversation-back"><i class="ri-arrow-left-line"></i></button>
                        <div class="conversation-user">
                            <img class="conversation-user-image" src="{{ url_for('static', filename='images/profile_pic/' + other_user.image_file) }}">
                            <div>
                                <div class="conversation-user-name">{{ other_user.first_name }} {{ other_user.last_name }}</div>
                            </div>
                        </div>
                        <div class="conversation-buttons">
                            <button type="button"><i class="ri-phone-fill"></i></button>
                            <button type="button"><i class="ri-vidicon-line"></i></button>
                            <button type="button"><i class="ri-information-line"></i></button>
                        </div>
                    </div>
                    <div class="conversation-main">
                        <ul class="conversation-wrapper">
                            {% set today = current_datetime.date() %}
                            {% set yesterday = today - timedelta_class(days=1) %}
                            {% set displayed_date = None %}
                            {% for message in chat_messages[chat.id] %}
                                {% set message_date = message.timestamp.date() %}
                                {% if message_date == today %}
                                    {% set display_date = 'Today' %}
                                {% elif message_date == yesterday %}
                                    {% set display_date = 'Yesterday' %}
                                {% else %}
                                    {% set display_date = message.timestamp.strftime('%A') %}
                                {% endif %}
                                {% if displayed_date != display_date %}
                                    <div class="conversation-divider"><span>{{ display_date }}</span></div>
                                    {% set displayed_date = display_date %}
                                {% endif %}
                            {% if message.user_id == current_user.id %}
                                <li class="conversation-item me">
                            {% else %}
                                <li class="conversation-item">
                            {% endif %}
                                <div class="conversation-item-side">
                                    {% if message.user_id == current_user.id %}
                                        <img src="{{ url_for('static', filename='images/profile_pic/' + current_user.image_file) }}" class="conversation-item-image">
                                    {% else %}
                                        {% set other_user = message.user %}
                                        <img src="{{ url_for('static', filename='images/profile_pic/' + other_user.image_file) }}" class="conversation-item-image">
                                    {% endif %}
                                </div>
                                <div class="conversation-item-content">
                                    <div class="conversation-item-wrapper">
                                        <div class="conversation-item-box">
                                            <div class="conversation-item-text">
                                                <p>{{ message.content }}</p>
                                                <span class="conversation-item-time">{{ message.timestamp.strftime('%H:%M') }}</span>
                                            </div>
                                            <div class="conversation-item-dropdown">
                                                <button type="button" class="conversation-item-dropdown-toggle"><i class="ri-more-2-line"></i></button>
                                                <ul class="conversation-item-dropdown-list">
                                                    <li><a href="#"><i class="ri-share-forward-line"></i>Forward</a></li>
                                                    <li><a href="#"><i class="ri-delete-bin-line"></i>Delete</a></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="conversation-item-wrapper">
                                        <div class="conversation-item-box">
                                            <div class="conversation-item-text">
                                                <p>So I have a gig at Abakpa, I will like to get an agreement with you</p>
                                                <span class="conversation-item-time">11:23</span>
                                            </div>
                                            <div class="conversation-item-dropdown">
                                                <button type="button" class="conversation-item-dropdown-toggle"><i class="ri-more-2-line"></i></button>
                                                <ul class="conversation-item-dropdown-list">
                                                    <li><a href="#"><i class="ri-share-forward-line"></i>Forward</a></li>
                                                    <li><a href="#"><i class="ri-delete-bin-line"></i>Delete</a></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                            <li class="conversation-item">
                                <div class="conversation-item-side">
                                    <img src="{{ url_for('static', filename='images/website_pic/about/about.jpg') }}" class="conversation-item-image">
                                </div>
                                <div class="conversation-item-content">
                                    <div class="conversation-item-wrapper">
                                        <div class="conversation-item-box">
                                            <div class="conversation-item-text">
                                                <p>Good Morning, I want to rent your piano, is it still available</p>
                                                <span class="conversation-item-time">11:20</span>
                                            </div>
                                            <div class="conversation-item-dropdown">
                                                <button type="button" class="conversation-item-dropdown-toggle"><i class="ri-more-2-line"></i></button>
                                                <ul class="conversation-item-dropdown-list">
                                                    <li><a href="#"><i class="ri-share-forward-line"></i>Forward</a></li>
                                                    <li><a href="#"><i class="ri-delete-bin-line"></i>Delete</a></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="conversation-item-wrapper">
                                        <div class="conversation-item-box">
                                            <div class="conversation-item-text">
                                                <p>So I have a gig at Abakpa, I will like to get an agreement with you</p>
                                                <span class="conversation-item-time">11:23</span>
                                            </div>
                                            <div class="conversation-item-dropdown">
                                                <button type="button" class="conversation-item-dropdown-toggle"><i class="ri-more-2-line"></i></button>
                                                <ul class="conversation-item-dropdown-list">
                                                    <li><a href="#"><i class="ri-share-forward-line"></i>Forward</a></li>
                                                    <li><a href="#"><i class="ri-delete-bin-line"></i>Delete</a></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                            {% endfor %}
                        </ul>
                    </div>
                    <div class="conversation-form">
                        <button type="button" class="conversation-form-button conversation-form-emoji"><i class="ri-emotion-line"></i></button>
                        <div class="conversation-form-group">
                            <textarea name="text" id="input" rows="1" class="conversation-form-input" placeholder="Type here..."></textarea>
                            <button type="button" class="conversation-form-record"><i class="ri-mic-line"></i></button>
                        </div>
                        <button type="button" class="conversation-form-button conversation-form-submit"><i class="ri-send-plane-2-line"></i></button>
                    </div>
                </div>
            {% endfor %}

// Assuming you have included SocketIO library in your HTML

// Handle form submission
document.querySelector('.conversation-form-submit').addEventListener('click', function() {
    var messageContent = document.querySelector('.conversation-form-input').value;
    var chatId = "conversation-" + chatIdFromSomeWhere; // You need to replace chatIdFromSomeWhere with actual chat ID

    // Emit message to server
    socket.emit('new_message', {content: messageContent, chat_id: chatId});
});

// Receive and display messages from other users
socket.on('receive_message', function(data) {
    // Add message to conversation area
    var messageHtml = '<li class="conversation-item">' +
                          '<div class="conversation-item-side">' +
                              '<img src="' + data.profile_pic_url + '" class="conversation-item-image">' +
                          '</div>' +
                          '<div class="conversation-item-content">' +
                              '<div class="conversation-item-wrapper">' +
                                  '<div class="conversation-item-box">' +
                                      '<div class="conversation-item-text">' +
                                          '<p>' + data.content + '</p>' +
                                          '<span class="conversation-item-time">' + data.timestamp + '</span>' +
                                      '</div>' +
                                      '<div class="conversation-item-dropdown">' +
                                          '<button type="button" class="conversation-item-dropdown-toggle"><i class="ri-more-2-line"></i></button>' +
                                          '<ul class="conversation-item-dropdown-list">' +
                                              '<li><a href="#"><i class="ri-share-forward-line"></i>Forward</a></li>' +
                                              '<li><a href="#"><i class="ri-delete-bin-line"></i>Delete</a></li>' +
                                          '</ul>' +
                                      '</div>' +
                                  '</div>' +
                              '</div>' +
                          '</div>' +
                      '</li>';
    document.querySelector('.conversation-wrapper').innerHTML += messageHtml;
});


content = data['content']
    chat_id = data['chat_id']
    user_id = current_user.id
    timestamp = datetime.utcnow()
    user_image_file = get_user_image_file(user_id)

    # Save the message to the database
    message = Message(content=content, chat_id=chat_id, user_id=user_id, timestamp=timestamp)
    db.session.add(message)
    db.session.commit()
    # Emit a 'receive_message' event to all clients
    emit('receive_message', {'content': content, 'chat_id': chat_id, 'user_image_file': user_image_file, timestamp: timestamp}, broadcast=True)

const fullName = `{{ first_name }} {{ last_name }}`;
// socketio that control the message of users
document.addEventListener('DOMContentLoaded', () => {
    var socket = io.connect('http://' + document.domain + ':' + location.port);

    let room;

    socket.on('message', data => {
        const p = document.createElement('p');
        const span_username = document.createElement('span');
        const span_timestamp = document.createElement('span'); 
        const br =document.createElement('br');
        span_username.innerHTML = data.fullName;
        span_timestamp.innerHTML = data.time_stamp;
        p.innerHTML = span_username.outerHTML + br.outerHTML + data.msg + br.outerHTML + span_timestamp.outerHTML;
        document.querySelector('.conversation-main').append(p);
    });

    // send message
    document.querySelector('.conversation-form-submit').onclick = () => {
        socket.send({'msg': document.querySelector('.conversation-form-input').value, 'fullName': fullName, 'room': room })
    }

    document.querySelectorAll('select-room').forEach(p => {
        p.onclick = () => {
            let newRoom = p.innerHTML;
            if (newRoom == room) {
                msg = `You are already in ${room} room.`
                printSysMsg(msg);
            } else {
                leaveRoom(room);
                joinRoom(newRoom);
                room = newRoom;
            }
        }
    });

    // leave room
    function leaveRoom(room) {
        socket.emit('leave', {'fullName': fullName, 'room': room});
    }

    // join room 
    function joinRoom(room) {
        socket.emit('join', {'fullName': fullName, 'room': room});
        // clear message area
        document.querySelector('.content-messages').innerHTML = ''
    }

    // Print System Message
    function printSysMsg(msg) {
        const p = document.createElement('p');
        p.innerHTML = msg;
        document.querySelector('.content-messages').append(p);
    }
})


class Chat(db.Model):
    id = db.Column(db.String(64), primary_key=True)
    post_id = db.Column(db.Integer, db.ForeignKey('post.id'), nullable=False)
    user1_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user2_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    messages = db.relationship('Message', backref='chat', lazy=True)

    def __init__(self, post_id, user1_id, user2_id):
        self.post_id = post_id
        self.user1_id = user1_id
        self.user2_id = user2_id
        self.id = self.generate_chat_id()

    @validates('user1_id')
    def validate_user1_id(self, key, user1_id):
        # Ensure user1_id is different from user2_id
        if user1_id == self.user2_id:
            raise ValueError("user1_id and user2_id cannot be the same.")
        return user1_id

    @validates('user2_id')
    def validate_user2_id(self, key, user2_id):
        # Ensure user2_id is different from user1_id
        if user2_id == self.user1_id:
            raise ValueError("user1_id and user2_id cannot be the same.")
        return user2_id

    def generate_chat_id(self):
        # Generate a unique chat ID based on user IDs
        sorted_ids = sorted([self.user1_id, self.user2_id])
        chat_id = '-'.join(map(str, sorted_ids))
        return chat_id
    
class Message(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    chat_id = db.Column(db.String(64), db.ForeignKey('chat.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    content = db.Column(db.Text, nullable=False)
    timestamp = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)

    def __init__(self, chat_id, user_id, content):
        self.chat_id = chat_id
        self.user_id = user_id
        self.content = content

    @validates('user_id')
    def validate_user_id(self, key, user_id):
        # Check if the provided user_id is one of the users in the chat
        chat = Chat.query.get(self.chat_id)
        if chat.user1_id != user_id and chat.user2_id != user_id:
            raise ValueError("User is not part of the chat.")
        return user_id


"""class Category(Enum):
    KEYBOARDS_SYNTHESIZERS = 'Keyboards & Synthesizers'
    ELECTRIC_GUITARS = 'Electric Guitars'
    ACOUSTIC_GUITARS = 'Acoustic Guitars'
    BASS_GUITARS = 'Bass Guitars'
    DRUM_KITS = 'Drum Kits'
    ELECTRONIC_DRUM_MACHINES = 'Electronic Drum Machines'
    DJ_CONTROLLERS = 'DJ Controllers'
    TURNTABLES = 'Turntables'
    MIXERS_AUDIO = 'Mixers (Audio)'
    MICROPHONES = 'Microphones'
    HEADPHONES = 'Headphones'
    PA_SYSTEMS = 'PA Systems'
    STUDIO_MONITORS = 'Studio Monitors'
    STAGE_LIGHTING = 'Stage Lighting'
    EFFECTS_PEDALS = 'Effects Pedals'
    AUDIO_INTERFACES = 'Audio Interfaces'
    MIDI_CONTROLLERS = 'MIDI Controllers'
    DIGITAL_PIANOS = 'Digital Pianos'
    STAGE_AMPLIFIERS = 'Stage Amplifiers'
    RECORDING_EQUIPMENT = 'Recording Equipment'
    KARAOKE_MACHINES = 'Karaoke Machines'
    CD_PLAYERS_RECORDERS = 'CD Players & Recorders'
    TAPE_DECKS = 'Tape Decks'
    VINYL_RECORDS = 'Vinyl Records'
    CABLES_CONNECTORS = 'Cables & Connectors'
    MUSICAL_INSTRUMENT_CASES_BAGS = 'Musical Instrument Cases & Bags'
    MUSIC_STANDS = 'Music Stands'
    INSTRUMENT_ACCESSORIES = 'Instrument Accessories (e.g., guitar picks, drumsticks)'
    SPEAKER_STANDS = 'Speaker Stands'
    SUBWOOFERS = 'Subwoofers'
    PORTABLE_PA_SYSTEMS = 'Portable PA Systems'
    LIVE_SOUND_MIXERS = 'Live Sound Mixers'
    WIRELESS_MICROPHONE_SYSTEMS = 'Wireless Microphone Systems'
    IN_EAR_MONITORS = 'In-Ear Monitors'
    DIGITAL_AUDIO_WORKSTATIONS = 'Digital Audio Workstations (DAWs)'
    MUSIC_PRODUCTION_SOFTWARE = 'Music Production Software'
    SAMPLE_LIBRARIES_SOUND_PACKS = 'Sample Libraries & Sound Packs'
    SOUND_MODULES = 'Sound Modules'
    MUSIC_PRODUCTION_CONTROLLERS = 'Music Production Controllers'
    ANALOG_SYNTHESIZERS = 'Analog Synthesizers'
    EFFECTS_PROCESSORS = 'Effects Processors'
    SPEAKER_CABINETS = 'Speaker Cabinets'
    SPEAKER_COMPONENTS = 'Speaker Components (e.g., woofers, tweeters)'
    POWER_AMPLIFIERS = 'Power Amplifiers'
    KARAOKE_MICROPHONES = 'Karaoke Microphones'
    KARAOKE_SPEAKERS = 'Karaoke Speakers'
    DJ_LIGHTING = 'DJ Lighting'
    DJ_SOFTWARE = 'DJ Software'
    DJ_MIXERS = 'DJ Mixers'
    DJ_TURNTABLE_CARTRIDGES = 'DJ Turntable Cartridges'
    CHOOSE = 'Choose a Category'"""

MelodyRental.com offers a diverse selection of top-quality musical instruments for hassle-free rental experiences. With transparent policies and responsive customer support, it's the go-to destination for musicians seeking reliable instrument rentals.


Category = Enum(
    'Category',
    [
        'Keyboards & Synthesizers', 'Electric Guitars', 'Acoustic Guitars', 'Bass Guitars', 'Drum Kits', 'Electronic Drum Machines', 'DJ Controllers', 'Turntables', 'Mixers (Audio)', 'Microphones', 'Headphones', 'PA Systems', 'Studio Monitors', 'Stage Lighting', 'Effects Pedals', 'Audio Interfaces', 'MIDI Controllers', 'Digital Pianos', 'Stage Amplifiers', 'Recording Equipment', 'Karaoke Machines', 'CD Players & Recorders', 'Tape Decks', 'Vinyl Records', 'Cables & Connectors', 'Musical Instrument Cases & Bags', 'Music Stands', 'Instrument Accessories (e.g., guitar picks, drumsticks)', 'Speaker Stands', 'Subwoofers', 'Portable PA Systems', 'Live Sound Mixers', 'Wireless Microphone Systems', 'In-Ear Monitors', 'Digital Audio Workstations (DAWs)', 'Music Production Software', 'Sample Libraries & Sound Packs', 'Sound Modules', 'Music Production Controllers', 'Analog Synthesizers', 'Effects Processors', 'Speaker Cabinets', 'Speaker Components (e.g., woofers, tweeters)', 'Power Amplifiers', 'Karaoke Microphones', 'Karaoke Speakers', 'DJ Lighting', 'DJ Software', 'DJ Mixers', 'DJ Turntable Cartridges', 'Choose a Category'
    ]
)


City = Enum(
    'City',
    [
        'ABIA', 'ADAMAWA', 'AKWA_IBOM', 'ANAMBRA', 'BAUCHI', 'BAYELSA', 'BENUE',
        'BORNO', 'CROSS_RIVER', 'DELTA', 'EBONYI', 'EDO', 'EKITI', 'ENUGU', 'FCT',
        'GOMBE', 'IMO', 'JIGAWA', 'KADUNA', 'KANO', 'KATSINA', 'KEBBI', 'KOGI',
        'KWARA', 'LAGOS', 'NASARAWA', 'NIGER', 'OGUN', 'ONDO', 'OSUN', 'OYO',
        'PLATEAU', 'RIVERS', 'SOKOTO', 'TARABA', 'YOBE', 'ZAMFARA'
    ]
)

"""class City(Enum):
    ABIA = 'Abia'
    ADAMAWA = 'Adamawa'
    AKWA_IBOM = 'Akwa Ibom'
    ANAMBRA = 'Anambra'
    BAUCHI = 'Bauchi'
    BAYELSA = 'Bayelsa'
    BENUE = 'Benue'
    BORNO = 'Borno'
    CROSS_RIVER = 'Cross River'
    DELTA = 'Delta'
    EBONYI = 'Ebonyi'
    EDO = 'Edo'
    EKITI = 'Ekiti'
    ENUGU = 'Enugu'
    FCT = 'FCT'
    GOMBE = 'Gombe'
    IMO = 'Imo'
    JIGAWA = 'Jigawa'
    KADUNA = 'Kaduna'
    KANO = 'Kano'
    KATSINA = 'Katsina'
    KEBBI = 'Kebbi'
    KOGI = 'Kogi'
    KWARA = 'Kwara'
    LAGOS = 'Lagos'
    NASARAWA = 'Nasarawa'
    NIGER = 'Niger'
    OGUN = 'Ogun'
    ONDO = 'Ondo'
    OSUN = 'Osun'
    OYO = 'Oyo'
    PLATEAU = 'Plateau'
    RIVERS = 'Rivers'
    SOKOTO = 'Sokoto'
    TARABA = 'Taraba'
    YOBE = 'Yobe'
    ZAMFARA = 'Zamfara' """

Rating = Enum('Rating', [0, 1, 2, 3, 4, 5])

""" class Rating(Enum):
    ZERO = 0
    ONE = 1
    TWO = 2
    THREE = 3
    FOUR = 4
    FIVE = 5 """